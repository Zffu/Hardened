package net.zffu.hardened.api.context;

import com.sun.org.apache.xpath.internal.Arg;
import net.zffu.hardened.api.args.Argument;
import net.zffu.hardened.api.commands.Command;
import net.zffu.hardened.api.invoker.CommandInvoker;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

/**
 * <p>A command context is an object containing information about a command's execution. Such as the {@link CommandInvoker}, the parsed arguments and the command label used.</p>
 * <p>Command contexts are generated by the platform implementations.</p>
 * @since 1.0.0
 */
public class CommandContext {

    private CommandInvoker invoker;
    private Object[] args; // Preformatted args
    private String name;

    /**
     * <p>Creates a new {@link CommandContext} based on the provided command execution information. Mostly used by implementations</p>
     * @param invoker the {@link CommandInvoker}
     * @param args the arguments parsed by the preFormatArguments function.
     * @param name the label of the command used.
     */
    public CommandContext(@NotNull CommandInvoker invoker, @Nullable Object[] args, @NotNull String name) {
        this.invoker = invoker;
        this.args = args;
        this.name = name;
    }

    /**
     * <p>Gets the invoker of the {@link CommandContext}</p>
     * @return the {@link CommandInvoker}
     */
    public @NotNull CommandInvoker getInvoker() {
        return this.invoker;
    }

    /**
     * <p>Locates the argument in the preformatted argument values pool and casts it to the according class.</p>
     * <p><b>Note: </b>This function automatically checks for casting</p>
     * @param index the argument value's index to find it (also is the argument's index in the {@link Command})
     * @param clazz the {@link Class} of the output data type.
     * @param <T> the output data type.
     * @return the argument value casted to the provided type.
     * @throws IllegalArgumentException if the stored value isn't the same type as the provided data type.
     */
    public @Nullable <T> T get(int index, @NotNull Class<T> clazz) {
        Object o = this.args[index];

        if(clazz.isAssignableFrom(o.getClass())) {
            return (T) o;
        }
        throw new IllegalArgumentException("Tried getting the argument with index " + index + " with the " + clazz.getName() + " but argument value isn't of the same type!");
    }

    /**
     * Gets the length of args.
     * @return
     */
    public int getArgsLength() {
        return this.args.length;
    }

    /**
     * <p>Gets the name label of the command used.</p>
     * @return the command label.
     */
    public @NotNull String getName() {
        return this.name;
    }

    /**
     * <p>Preformats / parses the given raw {@link String} arguments and outputs the parsed arguments based on the registered arguments in the {@link Command}</p>
     * @param command the {@link Command}. Used to get the argument types.
     * @param args the raw string argument array.
     * @return the parsed arguments as a {@link Object[]};
     */
    public static Object[] preFormatArguments(@NotNull Command<?> command, @NotNull String[] args) {
        Object[] arguments = new Object[args.length];

        int index = 0;

        for(Argument argument : command.getArguments().getArguments()) {
            Object o = argument.getType().fromString(args[index]);

            if(o != null) arguments[index] = o;
            else if (!argument.isOptional()) return null;
        }
        return arguments;
    }

}
